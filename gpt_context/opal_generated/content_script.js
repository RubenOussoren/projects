Opal.queue(function(Opal) {/* Generated by Opal 1.7.3 */
  var $klass = Opal.klass, $def = Opal.def, $send = Opal.send, $truthy = Opal.truthy, $rb_lt = Opal.rb_lt, $rb_minus = Opal.rb_minus, $rb_plus = Opal.rb_plus, $defs = Opal.defs, $regexp = Opal.regexp, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, content_script = nil;

  Opal.add_stubs('setup_message_listener,each,each_with_index,strip,<,-,length,+,<<,filter_sensitive_information,nil?,apply_filters,gather_context_and_copy_to_clipboard,extract_context,gsub,new,join,union,filter_name,filter_common_name,filter_email,filter_url');
  
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'ContentScript');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    
    $def(self, '$initialize', function $$initialize() {
      var self = this;

      return self.$setup_message_listener()
    });
    
    $def(self, '$extract_context', function $$extract_context() {
      var self = this, notes = nil, omni_log_elements = nil;

      
      notes = [];
      omni_log_elements = Array.from(document.querySelectorAll('[data-test-id="omni-log-message-content"]'));
      $send(omni_log_elements, 'each', [], function $$1(omni_log_element){var self = $$1.$$s == null ? this : $$1.$$s, note = nil, content_elements = nil;

        
        if (omni_log_element == null) omni_log_element = nil;
        note = "";
        content_elements = Array.from(omni_log_element.querySelectorAll(':scope > *'));
        $send(content_elements, 'each_with_index', [], function $$2(content_element, index){var text_content = nil;

          
          if (content_element == null) content_element = nil;
          if (index == null) index = nil;
          text_content = (content_element.innerText).$strip();
          if ($truthy($rb_lt(index, $rb_minus(content_elements.$length(), 1)))) {
            text_content = $rb_plus(text_content, "\n")
          };
          return (note = $rb_plus(note, text_content));});
        return notes['$<<'](self.$filter_sensitive_information(note.$strip()));}, {$$s: self});
      return notes;
    });
    
    $def(self, '$filter_sensitive_information', function $$filter_sensitive_information(text) {
      
      
      if ($truthy(text['$nil?']())) {
        return nil
      };
      return $$('Filter').$apply_filters(text);
    });
    
    $def(self, '$setup_message_listener', function $$setup_message_listener() {
      var self = this;

      
      chrome.runtime.onMessage.addListener(function(request, sender, sendResponse) {
        if (request.action == 'gather_context') {
          try {
            var extracted_content = self.$gather_context_and_copy_to_clipboard();
            sendResponse({success: true, content: extracted_content});
          } catch (error) {
            console.error('Error in ContentScript:', error);
            sendResponse({success: false});
          }
          return true;
        }
      });
    
    });
    
    $def(self, '$copy_to_clipboard', function $$copy_to_clipboard(text) {
      
      
      navigator.clipboard.writeText(text).then(function() {
        console.log('Content copied to clipboard');
      }, function(err) {
        console.error('Failed to copy content: ', err);
      });
    
    });
    return $def(self, '$gather_context_and_copy_to_clipboard', function $$gather_context_and_copy_to_clipboard() {
      var self = this, context = nil, extracted_context = nil;

      
      context = self.$extract_context();
      extracted_context = "Context:\n";
      $send(context, 'each_with_index', [], function $$3(note, index){
        
        if (note == null) note = nil;
        if (index == null) index = nil;
        return (extracted_context = $rb_plus(extracted_context, "\n- Note " + ($rb_plus(index, 1)) + ":\n  " + (note.$gsub("\n", "\n  ")) + "\n"));});
      return extracted_context;
    });
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Filter');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    $defs(self, '$filter_name', function $$filter_name(text) {
      
      
      if ($truthy(text['$nil?']())) {
        return nil
      };
      return text.$gsub(/\b[A-Z][a-z]*\s*[A-Z][a-z]*\b(?=[^a-zA-Z\d\s]|$)/, "[Name]");
    });
    $defs(self, '$filter_common_name', function $$filter_common_name(text) {
      var first_name_regex = nil, last_name_regex = nil, name_regex = nil;

      
      if ($truthy(text['$nil?']())) {
        return nil
      };
      first_name_regex = $$('Regexp').$new((window.COMMON_FIRST_NAMES).$join("|"), "i");
      last_name_regex = $$('Regexp').$new((window.COMMON_LAST_NAMES).$join("|"), "i");
      name_regex = $$('Regexp').$union(first_name_regex, last_name_regex);
      return text.$gsub($regexp(["\\b", name_regex, "\\b"], 'i'), "[Name]");
    });
    $defs(self, '$filter_email', function $$filter_email(text) {
      
      
      if ($truthy(text['$nil?']())) {
        return nil
      };
      return text.$gsub(/\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z]{2,}\b/i, "[Email]");
    });
    $defs(self, '$filter_url', function $$filter_url(text) {
      var ignored_url_patterns = nil, ignored_url_regex = nil;

      
      if ($truthy(text['$nil?']())) {
        return nil
      };
      ignored_url_patterns = [/https?:\/\/getguru\.com/, /https?:\/\/bit\.ly/];
      ignored_url_regex = $$('Regexp').$union(ignored_url_patterns);
      return text.$gsub(ignored_url_regex, "[Ignored URL]");
    });
    return $defs(self, '$apply_filters', function $$apply_filters(text) {
      var self = this, filtered_text = nil;

      
      if ($truthy(text['$nil?']())) {
        return nil
      };
      filtered_text = self.$filter_name(text);
      filtered_text = self.$filter_common_name(filtered_text);
      filtered_text = self.$filter_email(filtered_text);
      filtered_text = self.$filter_url(filtered_text);
      return filtered_text;
    });
  })($nesting[0], null, $nesting);
  return (content_script = $$('ContentScript').$new());
});
